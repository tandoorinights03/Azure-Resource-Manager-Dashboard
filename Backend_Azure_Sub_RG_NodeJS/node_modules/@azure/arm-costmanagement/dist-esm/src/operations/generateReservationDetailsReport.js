/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/** Class containing GenerateReservationDetailsReport operations. */
export class GenerateReservationDetailsReportImpl {
    /**
     * Initialize a new instance of the class GenerateReservationDetailsReport class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Generates the reservations details report for provided date range asynchronously based on enrollment
     * id. The Reservation usage details can be viewed only by certain enterprise roles. For more details
     * on the roles see,
     * https://docs.microsoft.com/azure/cost-management-billing/manage/understand-ea-roles#usage-and-costs-access-by-role
     * @param billingAccountId Enrollment ID (Legacy BillingAccount ID)
     * @param startDate Start Date
     * @param endDate End Date
     * @param options The options parameters.
     */
    beginByBillingAccountId(billingAccountId, startDate, endDate, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { billingAccountId, startDate, endDate, options },
                spec: byBillingAccountIdOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generates the reservations details report for provided date range asynchronously based on enrollment
     * id. The Reservation usage details can be viewed only by certain enterprise roles. For more details
     * on the roles see,
     * https://docs.microsoft.com/azure/cost-management-billing/manage/understand-ea-roles#usage-and-costs-access-by-role
     * @param billingAccountId Enrollment ID (Legacy BillingAccount ID)
     * @param startDate Start Date
     * @param endDate End Date
     * @param options The options parameters.
     */
    beginByBillingAccountIdAndWait(billingAccountId, startDate, endDate, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginByBillingAccountId(billingAccountId, startDate, endDate, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Generates the reservations details report for provided date range asynchronously by billing profile.
     * The Reservation usage details can be viewed by only certain enterprise roles by default. For more
     * details on the roles see,
     * https://docs.microsoft.com/azure/cost-management-billing/reservations/reservation-utilization#view-utilization-in-the-azure-portal-with-azure-rbac-access
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param startDate Start Date
     * @param endDate End Date
     * @param options The options parameters.
     */
    beginByBillingProfileId(billingAccountId, billingProfileId, startDate, endDate, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { billingAccountId, billingProfileId, startDate, endDate, options },
                spec: byBillingProfileIdOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generates the reservations details report for provided date range asynchronously by billing profile.
     * The Reservation usage details can be viewed by only certain enterprise roles by default. For more
     * details on the roles see,
     * https://docs.microsoft.com/azure/cost-management-billing/reservations/reservation-utilization#view-utilization-in-the-azure-portal-with-azure-rbac-access
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param startDate Start Date
     * @param endDate End Date
     * @param options The options parameters.
     */
    beginByBillingProfileIdAndWait(billingAccountId, billingProfileId, startDate, endDate, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginByBillingProfileId(billingAccountId, billingProfileId, startDate, endDate, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const byBillingAccountIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/generateReservationDetailsReport",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startDate,
        Parameters.endDate
    ],
    urlParameters: [Parameters.$host, Parameters.billingAccountId],
    headerParameters: [Parameters.accept],
    serializer
};
const byBillingProfileIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/generateReservationDetailsReport",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startDate,
        Parameters.endDate
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountId,
        Parameters.billingProfileId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=generateReservationDetailsReport.js.map