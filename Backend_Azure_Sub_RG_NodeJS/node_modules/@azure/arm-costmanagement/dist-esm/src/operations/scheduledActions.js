/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ScheduledActions operations. */
export class ScheduledActionsImpl {
    /**
     * Initialize a new instance of the class ScheduledActions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all private scheduled actions.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all shared scheduled actions within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param options The options parameters.
     */
    listByScope(scope, options) {
        const iter = this.listByScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByScopePagingPage(scope, options, settings);
            }
        };
    }
    listByScopePagingPage(scope, options, settings) {
        return __asyncGenerator(this, arguments, function* listByScopePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByScope(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByScopeNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByScopePagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listByScopePagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByScopePagingPage(scope, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all private scheduled actions.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * List all shared scheduled actions within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param options The options parameters.
     */
    _listByScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listByScopeOperationSpec);
    }
    /**
     * Create or update a private scheduled action.
     * @param name Scheduled action name.
     * @param scheduledAction Scheduled action to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdate(name, scheduledAction, options) {
        return this.client.sendOperationRequest({ name, scheduledAction, options }, createOrUpdateOperationSpec);
    }
    /**
     * Get the private scheduled action by name.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    get(name, options) {
        return this.client.sendOperationRequest({ name, options }, getOperationSpec);
    }
    /**
     * Delete a private scheduled action.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    delete(name, options) {
        return this.client.sendOperationRequest({ name, options }, deleteOperationSpec);
    }
    /**
     * Create or update a shared scheduled action within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param name Scheduled action name.
     * @param scheduledAction Scheduled action to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdateByScope(scope, name, scheduledAction, options) {
        return this.client.sendOperationRequest({ scope, name, scheduledAction, options }, createOrUpdateByScopeOperationSpec);
    }
    /**
     * Get the shared scheduled action from the given scope by name.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    getByScope(scope, name, options) {
        return this.client.sendOperationRequest({ scope, name, options }, getByScopeOperationSpec);
    }
    /**
     * Delete a scheduled action within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    deleteByScope(scope, name, options) {
        return this.client.sendOperationRequest({ scope, name, options }, deleteByScopeOperationSpec);
    }
    /**
     * Processes a private scheduled action.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    run(name, options) {
        return this.client.sendOperationRequest({ name, options }, runOperationSpec);
    }
    /**
     * Runs a shared scheduled action within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param name Scheduled action name.
     * @param options The options parameters.
     */
    runByScope(scope, name, options) {
        return this.client.sendOperationRequest({ scope, name, options }, runByScopeOperationSpec);
    }
    /**
     * Checks availability and correctness of the name for a scheduled action.
     * @param checkNameAvailabilityRequest Scheduled action to be created or updated.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityRequest, options) {
        return this.client.sendOperationRequest({ checkNameAvailabilityRequest, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Checks availability and correctness of the name for a scheduled action within the given scope.
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param checkNameAvailabilityRequest Scheduled action to be created or updated.
     * @param options The options parameters.
     */
    checkNameAvailabilityByScope(scope, checkNameAvailabilityRequest, options) {
        return this.client.sendOperationRequest({ scope, checkNameAvailabilityRequest, options }, checkNameAvailabilityByScopeOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByScopeNext
     * @param scope The scope associated with scheduled action operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
     * @param nextLink The nextLink from the previous successful call to the ListByScope method.
     * @param options The options parameters.
     */
    _listByScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listByScopeNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.CostManagement/scheduledActions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledActionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledActionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledAction
        },
        201: {
            bodyMapper: Mappers.ScheduledAction
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    requestBody: Parameters.scheduledAction,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.name],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledAction
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledAction
        },
        201: {
            bodyMapper: Mappers.ScheduledAction
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    requestBody: Parameters.scheduledAction,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const getByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledAction
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const runOperationSpec = {
    path: "/providers/Microsoft.CostManagement/scheduledActions/{name}/execute",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const runByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}/execute",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
    headerParameters: [Parameters.accept],
    serializer
};
const checkNameAvailabilityOperationSpec = {
    path: "/providers/Microsoft.CostManagement/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    requestBody: Parameters.checkNameAvailabilityRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const checkNameAvailabilityByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    requestBody: Parameters.checkNameAvailabilityRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledActionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduledActionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWithNestedDetails
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=scheduledActions.js.map