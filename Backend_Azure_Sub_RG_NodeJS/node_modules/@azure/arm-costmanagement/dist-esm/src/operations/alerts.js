/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Alerts operations. */
export class AlertsImpl {
    /**
     * Initialize a new instance of the class Alerts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the alerts for scope defined.
     * @param scope The scope associated with alerts operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
     *              for partners.
     * @param options The options parameters.
     */
    list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec);
    }
    /**
     * Gets the alert for the scope by alert ID.
     * @param scope The scope associated with alerts operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
     *              for partners.
     * @param alertId Alert ID
     * @param options The options parameters.
     */
    get(scope, alertId, options) {
        return this.client.sendOperationRequest({ scope, alertId, options }, getOperationSpec);
    }
    /**
     * Dismisses the specified alert
     * @param scope The scope associated with alerts operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
     *              for partners.
     * @param alertId Alert ID
     * @param parameters Parameters supplied to the Dismiss Alert operation.
     * @param options The options parameters.
     */
    dismiss(scope, alertId, parameters, options) {
        return this.client.sendOperationRequest({ scope, alertId, parameters, options }, dismissOperationSpec);
    }
    /**
     * Lists the Alerts for external cloud provider type defined.
     * @param externalCloudProviderType The external cloud provider type associated with dimension/query
     *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'
     *                                  for consolidated account.
     * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or
     *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
     * @param options The options parameters.
     */
    listExternal(externalCloudProviderType, externalCloudProviderId, options) {
        return this.client.sendOperationRequest({ externalCloudProviderType, externalCloudProviderId, options }, listExternalOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/alerts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AlertsResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Alert
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],
    headerParameters: [Parameters.accept],
    serializer
};
const dismissOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Alert
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listExternalOperationSpec = {
    path: "/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/alerts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AlertsResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.externalCloudProviderType,
        Parameters.externalCloudProviderId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=alerts.js.map