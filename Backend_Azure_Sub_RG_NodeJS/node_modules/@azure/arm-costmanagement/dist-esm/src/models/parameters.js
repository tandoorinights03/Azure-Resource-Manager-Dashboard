/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { View as ViewMapper, DismissAlertPayload as DismissAlertPayloadMapper, ForecastDefinition as ForecastDefinitionMapper, QueryDefinition as QueryDefinitionMapper, Export as ExportMapper, GenerateCostDetailsReportRequestDefinition as GenerateCostDetailsReportRequestDefinitionMapper, GenerateDetailedCostReportDefinition as GenerateDetailedCostReportDefinitionMapper, ScheduledAction as ScheduledActionMapper, CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const viewName = {
    parameterPath: "viewName",
    mapper: {
        serializedName: "viewName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: ViewMapper
};
export const scope1 = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const alertId = {
    parameterPath: "alertId",
    mapper: {
        serializedName: "alertId",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: DismissAlertPayloadMapper
};
export const externalCloudProviderType = {
    parameterPath: "externalCloudProviderType",
    mapper: {
        serializedName: "externalCloudProviderType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const externalCloudProviderId = {
    parameterPath: "externalCloudProviderId",
    mapper: {
        serializedName: "externalCloudProviderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ForecastDefinitionMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: QueryDefinitionMapper
};
export const billingAccountId = {
    parameterPath: "billingAccountId",
    mapper: {
        serializedName: "billingAccountId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const startDate = {
    parameterPath: "startDate",
    mapper: {
        serializedName: "startDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const endDate = {
    parameterPath: "endDate",
    mapper: {
        serializedName: "endDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const billingProfileId = {
    parameterPath: "billingProfileId",
    mapper: {
        serializedName: "billingProfileId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const exportName = {
    parameterPath: "exportName",
    mapper: {
        serializedName: "exportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: ExportMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: GenerateCostDetailsReportRequestDefinitionMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: GenerateDetailedCostReportDefinitionMapper
};
export const billingAccountName = {
    parameterPath: "billingAccountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+):([A-Za-z0-9]+(-[A-Za-z0-9]+)+)_[0-9]{4}-[0-9]{2}-[0-9]{2}")
        },
        serializedName: "billingAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const billingProfileName = {
    parameterPath: "billingProfileName",
    mapper: {
        constraints: {
            Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+)")
        },
        serializedName: "billingProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const invoiceName = {
    parameterPath: "invoiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("[A-Za-z0-9]+")
        },
        serializedName: "invoiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const scheduledAction = {
    parameterPath: "scheduledAction",
    mapper: ScheduledActionMapper
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequestMapper
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
export const billingScope = {
    parameterPath: "billingScope",
    mapper: {
        serializedName: "billingScope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const grainParameter = {
    parameterPath: ["options", "grainParameter"],
    mapper: {
        serializedName: "grainParameter",
        type: {
            name: "String"
        }
    }
};
export const filter1 = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "filter",
        type: {
            name: "String"
        }
    }
};
export const savingsPlanOrderId = {
    parameterPath: "savingsPlanOrderId",
    mapper: {
        serializedName: "savingsPlanOrderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const savingsPlanId = {
    parameterPath: "savingsPlanId",
    mapper: {
        serializedName: "savingsPlanId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map