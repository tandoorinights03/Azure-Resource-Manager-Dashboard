/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing BenefitUtilizationSummaries operations. */
export class BenefitUtilizationSummariesImpl {
    /**
     * Initialize a new instance of the class BenefitUtilizationSummaries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
     * values: 'Daily' and 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param options The options parameters.
     */
    listByBillingAccountId(billingAccountId, options) {
        const iter = this.listByBillingAccountIdPagingAll(billingAccountId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountIdPagingPage(billingAccountId, options, settings);
            }
        };
    }
    listByBillingAccountIdPagingPage(billingAccountId, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingAccountId(billingAccountId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingAccountIdNext(billingAccountId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingAccountIdPagingAll(billingAccountId, options) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByBillingAccountIdPagingPage(billingAccountId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
     * 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param options The options parameters.
     */
    listByBillingProfileId(billingAccountId, billingProfileId, options) {
        const iter = this.listByBillingProfileIdPagingAll(billingAccountId, billingProfileId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options, settings);
            }
        };
    }
    listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingProfileIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingProfileId(billingAccountId, billingProfileId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingProfileIdNext(billingAccountId, billingProfileId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingProfileIdPagingAll(billingAccountId, billingProfileId, options) {
        return __asyncGenerator(this, arguments, function* listByBillingProfileIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param options The options parameters.
     */
    listBySavingsPlanOrder(savingsPlanOrderId, options) {
        const iter = this.listBySavingsPlanOrderPagingAll(savingsPlanOrderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options, settings);
            }
        };
    }
    listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySavingsPlanOrderPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySavingsPlanOrder(savingsPlanOrderId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySavingsPlanOrderNext(savingsPlanOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySavingsPlanOrderPagingAll(savingsPlanOrderId, options) {
        return __asyncGenerator(this, arguments, function* listBySavingsPlanOrderPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param options The options parameters.
     */
    listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options) {
        const iter = this.listBySavingsPlanIdPagingAll(savingsPlanOrderId, savingsPlanId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options, settings);
            }
        };
    }
    listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySavingsPlanIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySavingsPlanIdNext(savingsPlanOrderId, savingsPlanId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySavingsPlanIdPagingAll(savingsPlanOrderId, savingsPlanId, options) {
        return __asyncGenerator(this, arguments, function* listBySavingsPlanIdPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
     * values: 'Daily' and 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param options The options parameters.
     */
    _listByBillingAccountId(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, listByBillingAccountIdOperationSpec);
    }
    /**
     * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
     * 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param options The options parameters.
     */
    _listByBillingProfileId(billingAccountId, billingProfileId, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, options }, listByBillingProfileIdOperationSpec);
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param options The options parameters.
     */
    _listBySavingsPlanOrder(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, listBySavingsPlanOrderOperationSpec);
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param options The options parameters.
     */
    _listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, options }, listBySavingsPlanIdOperationSpec);
    }
    /**
     * ListByBillingAccountIdNext
     * @param billingAccountId Billing account ID
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccountId method.
     * @param options The options parameters.
     */
    _listByBillingAccountIdNext(billingAccountId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, nextLink, options }, listByBillingAccountIdNextOperationSpec);
    }
    /**
     * ListByBillingProfileIdNext
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfileId method.
     * @param options The options parameters.
     */
    _listByBillingProfileIdNext(billingAccountId, billingProfileId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, nextLink, options }, listByBillingProfileIdNextOperationSpec);
    }
    /**
     * ListBySavingsPlanOrderNext
     * @param savingsPlanOrderId Savings plan order ID.
     * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanOrder method.
     * @param options The options parameters.
     */
    _listBySavingsPlanOrderNext(savingsPlanOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, nextLink, options }, listBySavingsPlanOrderNextOperationSpec);
    }
    /**
     * ListBySavingsPlanIdNext
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanId method.
     * @param options The options parameters.
     */
    _listBySavingsPlanIdNext(savingsPlanOrderId, savingsPlanId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, nextLink, options }, listBySavingsPlanIdNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.grainParameter,
        Parameters.filter1
    ],
    urlParameters: [Parameters.$host, Parameters.billingAccountId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.grainParameter,
        Parameters.filter1
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountId,
        Parameters.billingProfileId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanOrderOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.grainParameter
    ],
    urlParameters: [Parameters.$host, Parameters.savingsPlanOrderId],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanIdOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.grainParameter
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingAccountIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.billingAccountId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.billingAccountId,
        Parameters.billingProfileId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanOrderNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.savingsPlanOrderId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=benefitUtilizationSummaries.js.map