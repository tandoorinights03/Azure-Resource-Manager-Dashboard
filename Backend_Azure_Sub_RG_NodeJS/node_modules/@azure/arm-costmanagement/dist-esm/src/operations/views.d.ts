import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Views } from "../operationsInterfaces";
import { CostManagementClient } from "../costManagementClient";
import { View, ViewsListOptionalParams, ViewsListByScopeOptionalParams, ViewsGetOptionalParams, ViewsGetResponse, ViewsCreateOrUpdateOptionalParams, ViewsCreateOrUpdateResponse, ViewsDeleteOptionalParams, ViewsGetByScopeOptionalParams, ViewsGetByScopeResponse, ViewsCreateOrUpdateByScopeOptionalParams, ViewsCreateOrUpdateByScopeResponse, ViewsDeleteByScopeOptionalParams } from "../models";
/** Class containing Views operations. */
export declare class ViewsImpl implements Views {
    private readonly client;
    /**
     * Initialize a new instance of the class Views class.
     * @param client Reference to the service client
     */
    constructor(client: CostManagementClient);
    /**
     * Lists all views by tenant and object.
     * @param options The options parameters.
     */
    list(options?: ViewsListOptionalParams): PagedAsyncIterableIterator<View>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all views at the given scope.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param options The options parameters.
     */
    listByScope(scope: string, options?: ViewsListByScopeOptionalParams): PagedAsyncIterableIterator<View>;
    private listByScopePagingPage;
    private listByScopePagingAll;
    /**
     * Lists all views by tenant and object.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Lists all views at the given scope.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param options The options parameters.
     */
    private _listByScope;
    /**
     * Gets the view by view name.
     * @param viewName View name
     * @param options The options parameters.
     */
    get(viewName: string, options?: ViewsGetOptionalParams): Promise<ViewsGetResponse>;
    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the
     * request. You may obtain the latest eTag by performing a get operation. Create operation does not
     * require eTag.
     * @param viewName View name
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param options The options parameters.
     */
    createOrUpdate(viewName: string, parameters: View, options?: ViewsCreateOrUpdateOptionalParams): Promise<ViewsCreateOrUpdateResponse>;
    /**
     * The operation to delete a view.
     * @param viewName View name
     * @param options The options parameters.
     */
    delete(viewName: string, options?: ViewsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the view for the defined scope by view name.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param options The options parameters.
     */
    getByScope(scope: string, viewName: string, options?: ViewsGetByScopeOptionalParams): Promise<ViewsGetByScopeResponse>;
    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the
     * request. You may obtain the latest eTag by performing a get operation. Create operation does not
     * require eTag.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param options The options parameters.
     */
    createOrUpdateByScope(scope: string, viewName: string, parameters: View, options?: ViewsCreateOrUpdateByScopeOptionalParams): Promise<ViewsCreateOrUpdateByScopeResponse>;
    /**
     * The operation to delete a view.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param options The options parameters.
     */
    deleteByScope(scope: string, viewName: string, options?: ViewsDeleteByScopeOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByScopeNext
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param nextLink The nextLink from the previous successful call to the ListByScope method.
     * @param options The options parameters.
     */
    private _listByScopeNext;
}
//# sourceMappingURL=views.d.ts.map